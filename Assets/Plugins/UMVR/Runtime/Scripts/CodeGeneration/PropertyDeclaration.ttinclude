<#
// expects GenerationParams.GeneratedProperty prop
#>
<#
if (prop.CustomImplementation)
{
#>
		public <#= prop.IsCollection ? $"IList<{prop.Type}>" : prop.Type#> <#= prop.Name#> { get; <#= prop.IsReadonly ? "private " : "" #>set; }
<#
	continue;
}
#>
<#
if (prop.IsReadonly == false)
{
#>
		private <#= prop.IsModel ? "Model" : "" #><#= prop.IsCollection ? "Collection" : "Single" #>Property<<#= prop.Type #>> <#= prop.FieldName #>;
<#
}
#>
		<#= prop.Signature #>
		{
<#
if(prop.IsReadonly) 
{ 
#>
			get; <#= prop.IsReadonly ? "private" : "" #> set;
<# 
} 
else if (prop.IsCollection)
{ 
#>
			get => <#= prop.FieldName #>.Collection;
			set => <#= prop.FieldName #> = new <#= prop.IsModel ? "Model" : "" #><#= prop.IsCollection ? "Collection" : "Single"#>Property<<#= prop.Type #>>(nameof(<#= prop.Name #>), <#= prop.FieldName #>.Collection, value);
<# 
} 
else
{
#>
			get => <#= prop.FieldName #>.Value;
			set
			{
<#
	if (prop.CascadeDisposeUpstream)
	{
		settings.Vars["eventDirection"] = "-";
#>
				<#@ include file="DisposeUpstream.ttinclude" #>
<#
	}
#>
				<#= prop.FieldName #>.Value = value;
<#
	if (prop.CascadeDisposeUpstream)
	{
		settings.Vars["eventDirection"] = "+";
#>
				<#@ include file="DisposeUpstream.ttinclude" #>
<#
	}
#>
			}
<#
}
#>
		}

