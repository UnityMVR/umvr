<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<# 
	GenerationParams.GenSettings settings = ((pindwin.umvr.Editor.Generation.UMVRTemplateGenerator)Host).Settings;
	GenerationParams.GenConcreteModel model = settings.GenConcreteModel;
	GenerationParams.GenConcreteFactory factory = settings.GenConcreteFactory;
	GenerationParams.GenReactor reactor = settings.GenReactor;
	GenerationParams.GenRepository repository = settings.GenRepository;
	GenerationParams.GenReactorFactory reactorFactory = settings.GenReactorFactory;
#>
<#@ include file="AutoGenerated.ttinclude" #>

using pindwin.umvr.Model;
using pindwin.umvr.Reactor;
using pindwin.umvr.Repository;
using pindwin.umvr.Serialization;
using Zenject;

namespace <#= model.Namespace #>
{
	<#= factory.ToDeclarationString("	") #>
	{
		<#= factory.Constructors[0].ToSignatureString()#>
		{ }
	}

	<#= repository.ToDeclarationString("	") #>
	{
		<#= repository.Constructors[0].ToSignatureString()#>
		{ }
	}
	
	<#= reactorFactory.ToDeclarationString("	") #>
	{ }

	internal class <#= reactor.NullType #> : Reactor<<#= model.Type #>>
	{
		public <#= reactor.NullType #>(<#= model.Type #> model) : base(model)
		{ }

		protected override void BindDataSourceImpl(<#= model.Type #> model)
		{ }
	}
}

namespace <#= model.Namespace #>.Generated
{
	public class <#= model.Name #>InstallerBase : Installer<<#= model.Name #>InstallerBase>
	{
		public static void Install(DiContainer container, bool useReactor = true)
		{
			container.Instantiate<<#= model.Name #>InstallerBase>().InstallBindings(useReactor);
		}

		public override void InstallBindings()
		{
			InstallBindings(true);
		}

		public void InstallBindings(bool installReactor)
		{
			Container.BindFactory<Id<#= factory.GetBindingGenericParametersString() #>, <#= model.Type#>, <#= factory.Type#>>();
			Container.BindInterfacesTo<<#= factory.Type#>>().FromResolve();
			
			if (installReactor)
			{
				Container.BindFactory<<#= model.Type#>, <#= reactor.Type#>, <#= reactorFactory.NonNullType#>>();
				Container.BindInterfacesAndSelfTo<<#= repository.GetType(reactor.Type) #>>().AsSingle();
			}
			else
			{
				Container.BindFactory<<#= model.Type#>, <#= reactor.NullType#>, <#= reactorFactory.NullType#>>();
				Container.BindInterfacesAndSelfTo<<#= repository.GetType(reactor.NullType) #>>().AsSingle();
			}
		}
	}
}